# 前言

## 项目需要迭代

我们开发的应用程序是需要不断的迭代的，比如 version 1.0 、version 2.5 、version 3.9.11，这些指的都是版本号。不同版本号的应用程序，里面的功能都是不一样的，比如我们做一个名字叫做 project1 的应用，v1.0时可能仅仅只是基础框架，v1.1时增加用户中心模块，然后用了一段时间出现了一个致命的bug，然后我们把 project1 升级到了 v1.1.1 解决了这个bug，所以说应用程序是需要不断的迭代的。

## 版本管理

直接把项目复制出来一份，在副本项目中，直接做迭代，但这样做有一个坏处，如果升级的内容比较多，时间间隔又大的话，可能会忘记都做过什么事，这样就不便于管理了，所以应该选择一种更智能的方式管理我们的文件版本。

# Git分布式版本控制系统

## Git 的诞生

## Git的三棵树

- 工作区：我们编写代码的文件具体存放位置。
- 暂存区：临时存储区域。
- 版本库：代码仓库，即分支。文件最终保存的区域。

## 安装 Git

mac 自带 git，windows 需要安装 git。

安装完成后，还需要最后一步设置，在命令行输入：

```bash
git config --global user.name "Your Name"
git config --global user.email "email@example.com"
```

> 使用git config user.name或git config user.email可以查看用户名和邮箱。

## 创建本地仓库

- ### 创建文件夹，test_git

- ### 终端命令行输入：git init   

  ```html
  git init	#git初始化，不报错，代表初始化成功，会生成.git文件夹(是隐藏的)
  ```

  > 如果报错，没有识别到git, 记得添加环境变量  ...Git\bin

- ### 添加到暂存区

  ```
  git add .   #提交所有变化的文件
  git add abc #提交abc这个文件夹
  git add *.css #提交所有css文件
  ```

- ### 暂存区到代码库

  ```
  git commit -m '第一次提交'   #默认以master主分支提交，记得添加提交的注释，便于分清楚提交时的信息
  再修改一个文件
  重新git add .   git commit -m '第二次提交'执行一次
  ```

- ### 查看提交历史

  ```
  git log :查看提交日志
  ```

- ### 版本回溯

  你看到的一大串类似3628164...882e1e0的是commit id（版本号）在Git中，用HEAD表示当前版本，上一个版本就是HEAD^ ，上上一个版本就是HEAD^^ ，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

  ```
  git reset --hard head^
  或者不需要记忆次数，直接根据版本号前六位进行回退
  git reset --hard 版本号前六位
  ```

  继续使用git log查看，发现撤销前的版本看不到了，想回回不去了，怎么办？

  只能查看历史记录，找之前的版本号,

  ```
  git reset --hard 版本号前六位
  ```

  通过git reflog找版本号

  ```
  git reflog
  再切换版本
  git reset --hard 版本号前六位
  ```
  
- ### 分支操作

  ```
  创建分支
  git branch 分支名
  查看分支
  git branch -v
  切换分支fit
  git checkout 分支名
  合并分支
  1. git checkout 接收修改的分支
  2. git merge 新内容的分支
  出现冲突，可以手动解决，之后
  git add 文件名
  git commit -m '日志' #注意，此时commit不要带具体文件名
  ```

  

## 远程代码仓库

GitHub比较火，但毕竟是国外的网站，访问速度比较慢，所以也可以选择国内的码云

## GitHub

gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。

2018年6月4日，微软宣布，通过75亿美元的股票交易收购代码托管平台GitHub。

## 远程库操作

```
查看远程库别名
git remote -v
创建远程库别名
git remote add 别名(最好跟项目名一致) 远程git地址
推送远程库
git push 别名或者地址 分支名
拉取远程库内容
git pull 别名或者地址 分支名
克隆
git clone 远程地址(clone不需要登录账号)
```

### 生成本地密钥

创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有 id_rsa 和 id_rsa.pub 这两个文件，如果已经有了，可直接跳到下一步。

如果没有

```
ssh-keygen -t rsa -C "1469720568@qq.com"
```

你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，所以也无需设置密码。

如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

### GitHub授权

登陆GitHub，打开“Account settings”，“SSH Keys”页面：

然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴 id_rsa.pub 文件的内容，点“Add Key”，你就应该看到已经添加的Key。

### Git整合Idea

#### Gitee和Gitlab需要大家课下自行学习